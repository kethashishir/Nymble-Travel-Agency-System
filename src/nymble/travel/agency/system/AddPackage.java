
package nymble.travel.agency.system;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.sql.*;

/**
 * This class represents the Add Package window for the travel agency system.
 * Allows the user to add travel packages with details such as package name,
 * passenger capacity, and destinations.
 */
public class AddPackage extends JFrame implements ActionListener {

    JButton btnnodestinations, add, back;
    JPanel dynamicFieldsPanel;
    JTextField tfItinerary, tfPackageName, tfPassengercapacity;

    /**
     * Constructor for the AddPackage class.
     * Sets up the GUI components and initializes the frame.
     */
    AddPackage() {
        setBounds(350, 200, 850, 550);
        getContentPane().setBackground(Color.WHITE);
        setLayout(null);

        ImageIcon i1 = new ImageIcon(ClassLoader.getSystemResource("icons/addpackage.png"));
        Image i2 = i1.getImage().getScaledInstance(850, 500, Image.SCALE_DEFAULT);
        ImageIcon i3 = new ImageIcon(i2);
        JLabel image = new JLabel(i3);
        image.setBounds(0, 0, 850, 500);
        add(image);

        JPanel p1 = new JPanel();
        p1.setBounds(175, 20, 500, 500);
        p1.setBackground(Color.WHITE);
        p1.setLayout(null);
        image.add(p1);

        // Labels and input components
        JLabel lblPackageName = new JLabel("Package Name: ");
        lblPackageName.setBounds(50, 50, 150, 25);
        p1.add(lblPackageName);

        tfPackageName = new JTextField();
        tfPackageName.setBounds(250, 50, 150, 25);
        p1.add(tfPackageName);

        JLabel lblPassengercapacity = new JLabel("Passenger Capacity: ");
        lblPassengercapacity.setBounds(50, 100, 150, 25);
        p1.add(lblPassengercapacity);

        tfPassengercapacity = new JTextField();
        tfPassengercapacity.setBounds(250, 100, 150, 25);
        p1.add(tfPassengercapacity);

        JLabel lblItinerary = new JLabel("No. of Destinations: ");
        lblItinerary.setBounds(50, 150, 150, 25);
        p1.add(lblItinerary);

        tfItinerary = new JTextField();
        tfItinerary.setBounds(250, 150, 150, 25);
        p1.add(tfItinerary);

        btnnodestinations = new JButton("Submit");
        btnnodestinations.setBounds(405, 150, 90, 25);
        btnnodestinations.addActionListener(this);
        p1.add(btnnodestinations);

        add = new JButton("Add Package");
        add.setBackground(Color.BLACK);
        add.setForeground(Color.WHITE);
        add.setBounds(60, 400, 150, 25);
        add.addActionListener(this);
        p1.add(add);

        back = new JButton(" Go Back");
        back.setBackground(Color.BLACK);
        back.setForeground(Color.WHITE);
        back.setBounds(240, 400, 150, 25);
        back.addActionListener(this);
        p1.add(back);

        dynamicFieldsPanel = new JPanel();
        dynamicFieldsPanel.setBounds(240, 200, 400, 200);
        dynamicFieldsPanel.setBackground(Color.WHITE);
        dynamicFieldsPanel.setLayout(null);

        add(dynamicFieldsPanel);

        setVisible(true);
    }

    /**
     * ActionListener implementation.
     * Handles button clicks and performs appropriate actions.
     *
     * @param ae ActionEvent generated by button click.
     */
    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == btnnodestinations) {
            generateDynamicFields();
        } else if (ae.getSource() == add) {
            savePackageDetails();
        } else {
            new TravelPackageManagement();
            setVisible(false);
        }
    }

    /**
     * Generates dynamic fields based on the number of destinations.
     */
    public void generateDynamicFields() {
        dynamicFieldsPanel.removeAll();

        try {
            int numberOfFields = Integer.parseInt(tfItinerary.getText());

            for (int i = 1; i <= numberOfFields; i++) {
                JLabel label = new JLabel("Destination" + i + ":");
                label.setBounds(0, 0, 100, 25);
                JTextField textField = new JTextField();
                textField.setBounds(150, 0, 150, 25);

                // Add label and text field to the dynamicFieldsPanel
                JPanel fieldPanel = new JPanel();
                fieldPanel.setLayout(null); // Set layout to null to use setBounds
                fieldPanel.setBounds(10, (i * 30) + 20, 300, 25); // Set bounds for the JPanel
                fieldPanel.setBackground(Color.WHITE);

                fieldPanel.add(label);
                fieldPanel.add(textField);

                dynamicFieldsPanel.add(fieldPanel);
            }

            // Refresh the panel to reflect changes
            dynamicFieldsPanel.revalidate();
            dynamicFieldsPanel.repaint();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number.");
        }
    }

    /**
     * Saves package details, including destinations, to the database.
     */
    public void savePackageDetails() {
        Conn c = new Conn();

        String packagename = tfPackageName.getText();
        String passcapacity = tfPassengercapacity.getText();
        String nodestinations = tfItinerary.getText();
        String availablecapacity = tfPassengercapacity.getText();

        try {
            // Insert package details into the Package table
            String packageQuery = "INSERT INTO Package VALUES (?, ?, ?, ?)";

            try (PreparedStatement packageStatement = c.getConnection().prepareStatement(packageQuery)) {
                packageStatement.setString(1, packagename);
                packageStatement.setString(2, passcapacity);
                packageStatement.setString(3, nodestinations);
                packageStatement.setString(4, availablecapacity);
                packageStatement.executeUpdate();

                // Create destination table for the package
                String create = "CREATE TABLE " + packagename + " (Destination VARCHAR(25))";
                try (PreparedStatement createTableStatement = c.getConnection().prepareStatement(create)) {
                    createTableStatement.executeUpdate();
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error creating table.");
                }
            }

            int numberOfFields = 0;

            try {
                numberOfFields = Integer.parseInt(tfItinerary.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid number.");
                return;
            }

            // Insert destinations into the package table
            for (int i = 1; i <= numberOfFields; i++) {
                JTextField textField = findTextFieldByIndex(i);

                if (textField == null) {
                    JOptionPane.showMessageDialog(this, "No data.");
                }

                if (textField != null) {
                    String insertDataSQL = "INSERT INTO " + packagename + " (Destination) VALUES (?)";

                    String value = textField.getText();

                    try (PreparedStatement preparedStatement = c.getConnection().prepareStatement(insertDataSQL)) {
                        preparedStatement.setString(1, value);
                        preparedStatement.executeUpdate();
                    } catch (SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error inserting data into the package table.");
                    }
                }
            }

            JOptionPane.showMessageDialog(this, "Data saved to the database.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving to the database.");
        }

        JOptionPane.showMessageDialog(null, "Package Details Added Successfully");
        setVisible(false);
    }

    /**
     * Finds a text field in the dynamicFieldsPanel based on its index.
     *
     * @param index Index of the text field to find.
     * @return JTextField object if found, null otherwise.
     */
    JTextField findTextFieldByIndex(int index) {
        for (Component component : dynamicFieldsPanel.getComponents()) {
            if (component instanceof JPanel) {
                Component[] subComponents = ((JPanel) component).getComponents();
                if (subComponents.length == 2 && subComponents[1] instanceof JTextField) {
                    JLabel label = (JLabel) subComponents[0];
                    int textFieldIndex = Integer.parseInt(label.getText().replaceAll("\\D", ""));

                    if (textFieldIndex == index) {
                        return (JTextField) subComponents[1];
                    }
                }
            }
        }
        return null; // Return null if not found
    }

    /**
     * The main method to start the AddPackage application.
     *
     * @param args Command-line arguments (not used).
     */
    public static void main(String[] args) {
        new AddPackage();
    }
}
